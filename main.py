import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType
import markups as nav # –°–æ–∫—Ä–∞—Ç–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ
from db import Database

import time
import datetime


TOKEN = "5******3:A***************************4" # input my token
YOOTOKEN = "3********8:TEST:3*****8" # input token –Æ–∫–∞—Å—Å—ã [–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –±–æ—Ç –ÆKassa: —Ç–µ—Å—Ç]
# –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –∫ –±–æ—Ç—É –ÆKassa
# (https://yookassa.ru/docs/support/payments/onboarding/integration/cms-module/telegram)

logging.basicConfig(level=logging.INFO)

# Initialize bot
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

db = Database('database.db')

# –ú–µ—Ç–æ–¥ –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã:
def days_to_seconds(days):
    return days * 24 * 60 * 60
# –ú–µ—Ç–æ–¥ –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞:
def time_sub_day(get_time):
    time_now = int(time.time())
    middle_time = int(get_time) - time_now

    if middle_time <=0:
        return False
    else:
        dt = str(datetime.timedelta(seconds=middle_time))
        dt = dt.replace("days", "–¥–Ω–µ–π") # –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–≥–ª. —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
        dt = dt.replace("day", "–¥–µ–Ω—å")
        return dt

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if(not db.user_exists(message.from_user.id)): # –ï—Å–ª–∏ –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫")
    else: # –ï—Å–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ –ø–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–º—É –º–µ–Ω—é!
        await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=nav.mainMenu)

@dp.message_handler()
async def bot_message(message: types.Message):
    if message.chat.type == 'private':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ. –†–ê–ë–û–¢–ê–ï–¢ –¢–û–õ–¨–ö–û –í –ü–†–ò–í–ê–¢–ù–û–ú –†–ï–ñ–ò–ú–ï!
        if message.text == 'üë§ –ü–†–û–§–ò–õ–¨':
            user_nickname = "–í–∞—à –Ω–∏–∫: " + db.get_nickname(message.from_user.id)
            user_sub = time_sub_day(db.get_time_sub(message.from_user.id))
            if user_sub == False:
                user_sub = "–ù–µ—Ç"
            user_sub = "\n–ü–æ–¥–ø–∏—Å–∫–∞: " + user_sub
            await bot.send_message(message.from_user.id, user_nickname + user_sub)

        elif message.text == '‚ù§ –ü–û–î–ü–ò–°–ö–ê':
            await bot.send_message(message.from_user.id, "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=nav.sub_inline_markup)

        elif message.text == 'üç∏ –¢–û–õ–¨–ö–û –î–õ–Ø –û–ü–õ–ê–¢–ò–í–®–ò–•':
            if db.get_sub_status(message.from_user.id):
                await bot.send_message(message.from_user.id, "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!!!")
            else:
                await bot.send_message(message.from_user.id, "–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π!")

        else:
            if db.get_signup(message.from_user.id) == "setnickname":
                if(len(message.text) > 15):
                    await bot.send_message(message.from_user.id, "–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤")
                elif '@' in message.text or '/' in message.text:
                    await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª")
                else:
                    db.set_nickname(message.from_user.id, message.text)
                    db.set_signup(message.from_user.id, "done")
                    await bot.send_message(message.from_user.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=nav.mainMenu)
            else:
                await bot.send_message(message.from_user.id, "–ù–µ –ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ –í—ã –≤–≤–µ–ª–∏...")

# –°–æ–∑–¥–∞—ë–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
@dp.callback_query_handler(text="submonth")
async def submonth(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id) # –£–¥–∞–ª–∏–ª –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_invoice(chat_id=call.from_user.id, title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", description="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", payload="month_sub", provider_token=YOOTOKEN, currency="RUB", start_parameter="test_bot", prices=[{"label": "–†—É–±", "amount": 15000}])

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏:
@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—à —Ç–æ–≤–∞—Ä —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –∏ –≤—ã–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞—á–Ω–æ–π –ø–æ–∫—É–ø–∫–µ:
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: types.Message):
    if message.successful_payment.invoice_payload == "month_sub":
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        time_sub = int(time.time()) + days_to_seconds(30)
        db.set_time_sub(message.from_user.id, time_sub)
        await bot.send_message(message.from_user.id, "–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü!")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)